<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="1" total="12" passed="10">
  <reporter-output>
  </reporter-output>
  <suite name="All Test Suite" duration-ms="27875" started-at="2022-08-16T10:42:33 CST" finished-at="2022-08-16T10:43:00 CST">
    <groups>
    </groups>
    <test name="D:/localRespority/ConfigurationAnnotations" duration-ms="27875" started-at="2022-08-16T10:42:33 CST" finished-at="2022-08-16T10:43:00 CST">
      <class name="com.testcase.HttpTest">
        <test-method status="PASS" signature="setUp()[pri:0, instance:com.testcase.HttpTest@5034c75a]" name="setUp" is-config="true" duration-ms="272" started-at="2022-08-16T10:42:33 CST" finished-at="2022-08-16T10:42:33 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method status="PASS" signature="getTest(java.lang.String)[pri:0, instance:com.testcase.HttpTest@5034c75a]" name="getTest" duration-ms="1385" started-at="2022-08-16T10:42:33 CST" finished-at="2022-08-16T10:42:34 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://reqres.in/api/users?pages=2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getTest -->
      </class> <!-- com.testcase.HttpTest -->
      <class name="com.testcase.TestRuntime">
        <test-method status="PASS" signature="divisionWithException()[pri:0, instance:com.testcase.TestRuntime@9629756]" name="divisionWithException" duration-ms="1" started-at="2022-08-16T10:42:55 CST" finished-at="2022-08-16T10:42:55 CST">
          <exception class="java.lang.ArithmeticException">
            <message>
              <![CDATA[/ by zero]]>
            </message>
            <full-stacktrace>
                <![CDATA[java.lang.ArithmeticException: / by zero
at com.testcase.TestRuntime.divisionWithException(TestRuntime.java:9)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
at java.lang.reflect.Method.invoke(Unknown Source)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.InvokeMethodRunnable.runOne(InvokeMethodRunnable.java:45)
at org.testng.internal.InvokeMethodRunnable.call(InvokeMethodRunnable.java:73)
at org.testng.internal.InvokeMethodRunnable.call(InvokeMethodRunnable.java:11)
at java.util.concurrent.FutureTask.run(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
at java.lang.Thread.run(Unknown Source)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArithmeticException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- divisionWithException -->
      </class> <!-- com.testcase.TestRuntime -->
      <class name="com.testcase.TestGetApi">
        <test-method status="PASS" signature="httpClientTest()[pri:0, instance:com.testcase.TestGetApi@51081592]" name="httpClientTest" duration-ms="21061" started-at="2022-08-16T10:42:34 CST" finished-at="2022-08-16T10:42:55 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- httpClientTest -->
      </class> <!-- com.testcase.TestGetApi -->
      <class name="com.testcase.TimeoutTest">
        <test-method status="PASS" signature="testThisShouldPass()[pri:0, instance:com.testcase.TimeoutTest@62ee68d8]" name="testThisShouldPass" duration-ms="4015" started-at="2022-08-16T10:42:55 CST" finished-at="2022-08-16T10:42:59 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThisShouldPass -->
        <test-method status="FAIL" signature="testThisShouldFail()[pri:0, instance:com.testcase.TimeoutTest@62ee68d8]" name="testThisShouldFail" duration-ms="1005" started-at="2022-08-16T10:42:59 CST" finished-at="2022-08-16T10:43:00 CST">
          <exception class="org.testng.internal.thread.ThreadTimeoutException">
            <message>
                <![CDATA[Method com.testcase.TimeoutTest.testThisShouldFail() didn't finish within the time-out 1000]]>
            </message>
            <full-stacktrace>
                <![CDATA[org.testng.internal.thread.ThreadTimeoutException: Method com.testcase.TimeoutTest.testThisShouldFail() didn't finish within the time-out 1000
at org.testng.internal.MethodInvocationHelper.invokeWithTimeoutWithNewExecutor(MethodInvocationHelper.java:371)
at org.testng.internal.MethodInvocationHelper.invokeWithTimeout(MethodInvocationHelper.java:282)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:605)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(Unknown Source)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.TestNG.privateMain(TestNG.java:1371)
at org.testng.TestNG.main(TestNG.java:1335)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.internal.thread.ThreadTimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThisShouldFail -->
      </class> <!-- com.testcase.TimeoutTest -->
      <class name="com.testcase.TestDataProvider3">
        <test-method status="PASS" signature="test1(int, int)[pri:0, instance:com.testcase.TestDataProvider3@7f9a81e8]" name="test1" duration-ms="0" started-at="2022-08-16T10:42:55 CST" data-provider="dataProvider" finished-at="2022-08-16T10:42:55 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method status="PASS" signature="test1(int, int)[pri:0, instance:com.testcase.TestDataProvider3@7f9a81e8]" name="test1" duration-ms="1" started-at="2022-08-16T10:42:55 CST" data-provider="dataProvider" finished-at="2022-08-16T10:42:55 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[200]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method status="PASS" signature="test2(java.lang.String, java.lang.String)[pri:0, instance:com.testcase.TestDataProvider3@7f9a81e8]" name="test2" duration-ms="1" started-at="2022-08-16T10:42:55 CST" data-provider="dataProvider" finished-at="2022-08-16T10:42:55 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[test@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test@gmail.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method status="PASS" signature="test2(java.lang.String, java.lang.String)[pri:0, instance:com.testcase.TestDataProvider3@7f9a81e8]" name="test2" duration-ms="0" started-at="2022-08-16T10:42:55 CST" data-provider="dataProvider" finished-at="2022-08-16T10:42:55 CST">
          <params>
            <param index="0">
              <value>
                <![CDATA[test@yahoo.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test@yahoo.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
      </class> <!-- com.testcase.TestDataProvider3 -->
      <class name="com.testcase.DBConfig">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:com.testcase.DBConfig@51efea79]" name="beforeSuite" is-config="true" duration-ms="6" started-at="2022-08-16T10:42:33 CST" finished-at="2022-08-16T10:42:33 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:com.testcase.DBConfig@51efea79]" name="beforeTest" duration-ms="3" started-at="2022-08-16T10:42:33 CST" finished-at="2022-08-16T10:42:33 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:com.testcase.DBConfig@51efea79]" name="afterTest" is-config="true" duration-ms="2" started-at="2022-08-16T10:43:00 CST" finished-at="2022-08-16T10:43:00 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
        <test-method status="PASS" signature="afterSuite()[pri:0, instance:com.testcase.DBConfig@51efea79]" name="afterSuite" is-config="true" duration-ms="0" started-at="2022-08-16T10:43:01 CST" finished-at="2022-08-16T10:43:01 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite -->
      </class> <!-- com.testcase.DBConfig -->
      <class name="com.testcase.TestDBConnection">
        <test-method status="PASS" signature="runOtherTest2()[pri:0, instance:com.testcase.TestDBConnection@396a51ab]" name="runOtherTest2" duration-ms="0" started-at="2022-08-16T10:42:34 CST" finished-at="2022-08-16T10:42:34 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runOtherTest2 -->
      </class> <!-- com.testcase.TestDBConnection -->
    </test> <!-- D:/localRespority/ConfigurationAnnotations -->
  </suite> <!-- All Test Suite -->
</testng-results>
